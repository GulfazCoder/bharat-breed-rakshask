import { aiClassificationService } from '../ai-classification';\n\n// Mock Google Vision API response for testing\nconst createMockVisionResponse = (labels: Array<{ description: string; score: number }>) => {\n  return {\n    responses: [\n      {\n        labelAnnotations: labels,\n        localizedObjectAnnotations: [],\n        imagePropertiesAnnotation: {\n          dominantColors: {\n            colors: [\n              {\n                color: { red: 20, green: 20, blue: 20 },\n                score: 0.8,\n                pixelFraction: 0.6\n              }\n            ]\n          }\n        }\n      }\n    ]\n  };\n};\n\n// Test scenarios for buffalo vs cattle classification\ndescribe('Buffalo vs Cattle Classification Tests', () => {\n  let service: any;\n  \n  beforeEach(() => {\n    // Access private methods for testing\n    service = aiClassificationService as any;\n  });\n\n  describe('Buffalo Detection', () => {\n    test('should correctly identify buffalo with strong indicators', () => {\n      const labels = [\n        { description: 'water buffalo', score: 0.9 },\n        { description: 'curved horns', score: 0.8 },\n        { description: 'jet black', score: 0.7 },\n        { description: 'thick horns', score: 0.8 },\n        { description: 'wallowing', score: 0.6 }\n      ];\n      \n      const objects = [\n        { name: 'Buffalo', score: 0.85 }\n      ];\n\n      const result = service.enhancedAnimalTypeAnalysis(labels, objects);\n      \n      expect(result.prediction).toBe('buffalo');\n      expect(result.confidence).toBeGreaterThan(0.7);\n    });\n\n    test('should identify Murrah buffalo breed', () => {\n      const labels = [\n        { description: 'murrah', score: 0.9 },\n        { description: 'buffalo', score: 0.8 },\n        { description: 'black', score: 0.7 },\n        { description: 'curved horns', score: 0.6 }\n      ];\n      \n      const objects = [{ name: 'animal', score: 0.7 }];\n\n      const result = service.enhancedAnimalTypeAnalysis(labels, objects);\n      \n      expect(result.prediction).toBe('buffalo');\n    });\n\n    test('should detect buffalo even when cattle terms are present', () => {\n      const labels = [\n        { description: 'cow', score: 0.6 }, // Lower confidence cattle term\n        { description: 'water buffalo', score: 0.9 }, // Strong buffalo indicator\n        { description: 'bubalus', score: 0.8 }, // Scientific buffalo name\n        { description: 'thick horns', score: 0.7 },\n        { description: 'livestock', score: 0.5 }\n      ];\n      \n      const objects = [];\n\n      const result = service.enhancedAnimalTypeAnalysis(labels, objects);\n      \n      expect(result.prediction).toBe('buffalo');\n      expect(result.confidence).toBeGreaterThan(0.6);\n    });\n  });\n\n  describe('Cattle Detection', () => {\n    test('should correctly identify cattle with clear indicators', () => {\n      const labels = [\n        { description: 'dairy cow', score: 0.9 },\n        { description: 'holstein', score: 0.8 },\n        { description: 'milk cow', score: 0.7 },\n        { description: 'black and white', score: 0.6 }\n      ];\n      \n      const objects = [\n        { name: 'Cow', score: 0.85 }\n      ];\n\n      const result = service.enhancedAnimalTypeAnalysis(labels, objects);\n      \n      expect(result.prediction).toBe('cattle');\n      expect(result.confidence).toBeGreaterThan(0.7);\n    });\n\n    test('should not misclassify cattle when no buffalo exclusions present', () => {\n      const labels = [\n        { description: 'bull', score: 0.8 },\n        { description: 'bovine', score: 0.7 },\n        { description: 'cattle', score: 0.9 },\n        { description: 'horned cattle', score: 0.6 }\n      ];\n      \n      const objects = [];\n\n      const result = service.enhancedAnimalTypeAnalysis(labels, objects);\n      \n      expect(result.prediction).toBe('cattle');\n    });\n  });\n\n  describe('Edge Cases and Discrimination Logic', () => {\n    test('should prefer buffalo when scores are close but buffalo exclusions present', () => {\n      const labels = [\n        { description: 'cow', score: 0.7 },\n        { description: 'bovine', score: 0.6 },\n        { description: 'buffalo', score: 0.4 }, // Lower buffalo score\n        { description: 'water buffalo', score: 0.3 }, // But exclusion terms present\n        { description: 'thick horns', score: 0.5 }\n      ];\n      \n      const objects = [];\n\n      const result = service.enhancedAnimalTypeAnalysis(labels, objects);\n      \n      // Should prefer buffalo due to exclusion logic\n      expect(result.prediction).toBe('buffalo');\n    });\n\n    test('should handle mixed signals with strong buffalo features override', () => {\n      const labels = [\n        { description: 'cattle', score: 0.8 },\n        { description: 'cow', score: 0.7 },\n        { description: 'bubalus', score: 0.9 }, // Strong buffalo scientific name\n        { description: 'curved horns', score: 0.8 },\n        { description: 'barrel shaped', score: 0.6 }\n      ];\n      \n      const objects = [];\n\n      const result = service.enhancedAnimalTypeAnalysis(labels, objects);\n      \n      expect(result.prediction).toBe('buffalo');\n    });\n\n    test('should handle low confidence scenarios gracefully', () => {\n      const labels = [\n        { description: 'animal', score: 0.3 },\n        { description: 'mammal', score: 0.2 }\n      ];\n      \n      const objects = [];\n\n      const result = service.enhancedAnimalTypeAnalysis(labels, objects);\n      \n      expect(result.confidence).toBeLessThan(0.5);\n      expect(result.confidence_level).toBe('low');\n    });\n  });\n\n  describe('Feedback System', () => {\n    test('should record user feedback correctly', () => {\n      const consoleSpy = jest.spyOn(console, 'log').mockImplementation();\n      \n      service.recordUserFeedback(\n        'cattle', \n        'buffalo', \n        0.75, \n        ['curved horns', 'black'], \n        'The horns were clearly curved like buffalo'\n      );\n      \n      const stats = service.getMisclassificationStats();\n      \n      expect(stats.totalFeedback).toBe(1);\n      expect(stats.buffaloAsCattle).toBe(1);\n      expect(stats.cattleAsBuffalo).toBe(0);\n      \n      consoleSpy.mockRestore();\n    });\n\n    test('should provide buffalo detection tips', () => {\n      const tips = service.getBuffaloDetectionTips();\n      \n      expect(tips.length).toBeGreaterThan(0);\n      expect(tips.some(tip => tip.includes('curved'))).toBe(true);\n      expect(tips.some(tip => tip.includes('black'))).toBe(true);\n    });\n\n    test('should calculate accuracy rate correctly', () => {\n      // Record some feedback\n      service.recordUserFeedback('buffalo', 'buffalo', 0.8, [], 'Correct');\n      service.recordUserFeedback('cattle', 'cattle', 0.9, [], 'Correct');\n      service.recordUserFeedback('cattle', 'buffalo', 0.7, [], 'Incorrect');\n      \n      const stats = service.getMisclassificationStats();\n      \n      expect(stats.totalFeedback).toBe(3);\n      expect(stats.accuracyRate).toBeCloseTo(66.7, 1);\n    });\n  });\n});\n\n// Integration test with mock classification\ndescribe('Full Classification Pipeline', () => {\n  test('should classify buffalo image correctly with enhanced logic', async () => {\n    // This would be an integration test with actual image data\n    // For now, we can test the mock result generation\n    \n    const service = aiClassificationService as any;\n    const mockResult = service.generateEnhancedMockResult(Date.now());\n    \n    expect(mockResult.animal_type.prediction).toMatch(/^(cattle|buffalo)$/);\n    expect(mockResult.breed.prediction).toBeDefined();\n    expect(mockResult.processing_time).toBeGreaterThan(0);\n  });\n});